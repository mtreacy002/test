<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="4502px" height="4881px" viewBox="-0.5 -0.5 4502 4881" content="&lt;mxfile host=&quot;Chrome&quot; modified=&quot;2020-04-06T13:51:40.258Z&quot; agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot; etag=&quot;3a6XZ3nyEF8U7jo3QZoB&quot; version=&quot;12.9.3&quot; type=&quot;device&quot; pages=&quot;3&quot;&gt;&lt;diagram name=&quot;Copy of MS Backend&quot; id=&quot;WJf00fKGSHu_8Ey_HJAo&quot;&gt;&lt;/diagram&gt;&lt;diagram name=&quot;Backend-App w Relation&quot; id=&quot;ZBlSFcQbwqdzAZpJYUnN&quot;&gt;&lt;/diagram&gt;&lt;diagram id=&quot;gh9ZGykjlmZ0eLBPmS_I&quot; name=&quot;MS Backend&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;"><defs><clipPath id="mx-clip-2134-581-272-224-0"><rect x="2134" y="581" width="272" height="224"/></clipPath><clipPath id="mx-clip-2134-813-272-82-0"><rect x="2134" y="813" width="272" height="82"/></clipPath><clipPath id="mx-clip-1797-581-267-26-0"><rect x="1797" y="581" width="267" height="26"/></clipPath><clipPath id="mx-clip-1797-615-267-26-0"><rect x="1797" y="615" width="267" height="26"/></clipPath><clipPath id="mx-clip-2704-581-552-74-0"><rect x="2704" y="581" width="552" height="74"/></clipPath><clipPath id="mx-clip-2704-663-552-1962-0"><rect x="2704" y="663" width="552" height="1962"/></clipPath><clipPath id="mx-clip-3494-581-662-94-0"><rect x="3494" y="581" width="662" height="94"/></clipPath><clipPath id="mx-clip-3494-683-662-3352-0"><rect x="3494" y="683" width="662" height="3352"/></clipPath><clipPath id="mx-clip-1594-1591-272-64-0"><rect x="1594" y="1591" width="272" height="64"/></clipPath><clipPath id="mx-clip-1594-1663-272-26-0"><rect x="1594" y="1663" width="272" height="26"/></clipPath><clipPath id="mx-clip-1984-1241-392-154-0"><rect x="1984" y="1241" width="392" height="154"/></clipPath><clipPath id="mx-clip-1984-1403-392-26-0"><rect x="1984" y="1403" width="392" height="26"/></clipPath><clipPath id="mx-clip-904-1271-422-1944-0"><rect x="904" y="1271" width="422" height="1944"/></clipPath><clipPath id="mx-clip-2764-3541-392-124-0"><rect x="2764" y="3541" width="392" height="124"/></clipPath><clipPath id="mx-clip-2704-2711-542-54-0"><rect x="2704" y="2711" width="542" height="54"/></clipPath><clipPath id="mx-clip-2704-2773-542-642-0"><rect x="2704" y="2773" width="542" height="642"/></clipPath><clipPath id="mx-clip-1534-2175-392-64-0"><rect x="1534" y="2175" width="392" height="64"/></clipPath><clipPath id="mx-clip-1534-2247-392-642-0"><rect x="1534" y="2247" width="392" height="642"/></clipPath><clipPath id="mx-clip-2064-2205-312-130-0"><rect x="2064" y="2205" width="312" height="130"/></clipPath><clipPath id="mx-clip-2019-2411-362-26-0"><rect x="2019" y="2411" width="362" height="26"/></clipPath><clipPath id="mx-clip-2019-2445-362-120-0"><rect x="2019" y="2445" width="362" height="120"/></clipPath><clipPath id="mx-clip-2014-2691-382-44-0"><rect x="2014" y="2691" width="382" height="44"/></clipPath><clipPath id="mx-clip-2014-2743-382-172-0"><rect x="2014" y="2743" width="382" height="172"/></clipPath><clipPath id="mx-clip-1544-2995-282-120-0"><rect x="1544" y="2995" width="282" height="120"/></clipPath><clipPath id="mx-clip-1594-1241-262-214-0"><rect x="1594" y="1241" width="262" height="214"/></clipPath><clipPath id="mx-clip-1594-1463-262-26-0"><rect x="1594" y="1463" width="262" height="26"/></clipPath><clipPath id="mx-clip-534-3541-262-26-0"><rect x="534" y="3541" width="262" height="26"/></clipPath><clipPath id="mx-clip-534-3575-262-140-0"><rect x="534" y="3575" width="262" height="140"/></clipPath><clipPath id="mx-clip-529-3775-272-26-0"><rect x="529" y="3775" width="272" height="26"/></clipPath><clipPath id="mx-clip-529-3885-272-26-0"><rect x="529" y="3885" width="272" height="26"/></clipPath><clipPath id="mx-clip-1154-3616-302-349-0"><rect x="1154" y="3616" width="302" height="349"/></clipPath><clipPath id="mx-clip-1154-3973-302-282-0"><rect x="1154" y="3973" width="302" height="282"/></clipPath><clipPath id="mx-clip-1514-3616-322-59-0"><rect x="1514" y="3616" width="322" height="59"/></clipPath><clipPath id="mx-clip-1514-3683-322-522-0"><rect x="1514" y="3683" width="322" height="522"/></clipPath><clipPath id="mx-clip-1904-3618-342-111-0"><rect x="1904" y="3618" width="342" height="111"/></clipPath><clipPath id="mx-clip-1904-3737-342-288-0"><rect x="1904" y="3737" width="342" height="288"/></clipPath><clipPath id="mx-clip-1904-4095-492-216-0"><rect x="1904" y="4095" width="492" height="216"/></clipPath><clipPath id="mx-clip-1904-4319-492-252-0"><rect x="1904" y="4319" width="492" height="252"/></clipPath><clipPath id="mx-clip-304-4251-382-54-0"><rect x="304" y="4251" width="382" height="54"/></clipPath><clipPath id="mx-clip-304-4313-382-142-0"><rect x="304" y="4313" width="382" height="142"/></clipPath><clipPath id="mx-clip-304-4525-242-40-0"><rect x="304" y="4525" width="242" height="40"/></clipPath><clipPath id="mx-clip-744-4251-212-84-0"><rect x="744" y="4251" width="212" height="84"/></clipPath><clipPath id="mx-clip-744-4343-212-52-0"><rect x="744" y="4343" width="212" height="52"/></clipPath><clipPath id="mx-clip-1394-551-312-54-0"><rect x="1394" y="551" width="312" height="54"/></clipPath><clipPath id="mx-clip-1054-559-312-116-0"><rect x="1054" y="559" width="312" height="116"/></clipPath><clipPath id="mx-clip-1064-711-292-26-0"><rect x="1064" y="711" width="292" height="26"/></clipPath><clipPath id="mx-clip-1064-745-292-60-0"><rect x="1064" y="745" width="292" height="60"/></clipPath><clipPath id="mx-clip-1444-671-152-26-0"><rect x="1444" y="671" width="152" height="26"/></clipPath><clipPath id="mx-clip-1374-4439-232-76-0"><rect x="1374" y="4439" width="232" height="76"/></clipPath></defs><g><rect x="0" y="0" width="4500" height="4880" rx="675" ry="675" fill="#fff2cc" stroke="#d6b656" pointer-events="none"/><rect x="1760" y="420" width="690" height="520" rx="78" ry="78" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><rect x="1030" y="420" width="690" height="450" rx="67.5" ry="67.5" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><rect x="470" y="1170" width="930" height="2140" rx="139.5" ry="139.5" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 2130 576 L 2130 550 L 2410 550 L 2410 576" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2130 576 L 2130 890 L 2410 890 L 2410 576" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2130 576 L 2410 576" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2269.5" y="567.5">user.py</text></g><rect x="2130" y="576" width="280" height="224" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2134-581-272-224-0)" font-size="12px"><text x="2135.5" y="593.5">+ NAME_MAX_LENGTH = 30</text><text x="2135.5" y="607.5">+ NAME_MIN_LENGTH = 2</text><text x="2135.5" y="621.5">+ USERNAME_MAX_LENGTH = 25</text><text x="2135.5" y="635.5">+ USERNAME_MIN_LENGTH = 5</text><text x="2135.5" y="649.5">+ PASSWORD_MAX_LENGTH = 64</text><text x="2135.5" y="663.5">+ PASSWORD_MIN_LENGTH = 8</text><text x="2135.5" y="691.5">+ BIO_MAX_LENGTH = 450</text><text x="2135.5" y="705.5">+ LOCATION_MAX_LENGTH = 60</text><text x="2135.5" y="719.5">+ OCCUPATION_MAX_LENGTH = 60</text><text x="2135.5" y="733.5">+ ORGANIZATION_MAX_LENGTH = 60</text><text x="2135.5" y="747.5">+ SLACK_USERNAME_MAX_LENGTH = 60</text><text x="2135.5" y="761.5">+ SKILLS_MAX_LENGTH = 450</text><text x="2135.5" y="775.5">+ INTERESTS_MAX_LENGTH = 150</text><text x="2135.5" y="789.5">+ SOCIALS_MAX_LENGTH = 400</text></g><path d="M 2130 804 L 2410 804" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="2130" y="808" width="280" height="82" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2134-813-272-82-0)" font-size="12px"><text x="2135.5" y="825.5">+ validate_user_registration_request_data(data)</text><text x="2135.5" y="839.5">+ validate_resend_email_request_data(data)</text><text x="2135.5" y="853.5">+ validate_update_prodile_request_data(data)</text><text x="2135.5" y="867.5">+ validate_new_password(data)</text></g><path d="M 1792.5 576 L 1792.5 550 L 2067.5 550 L 2067.5 576" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1792.5 576 L 1792.5 636 L 2067.5 636 L 2067.5 576" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1792.5 576 L 2067.5 576" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1929.5" y="567.5">task_comment.py</text></g><rect x="1792.5" y="576" width="275" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1797-581-267-26-0)" font-size="12px"><text x="1798" y="593.5">+ COMMENT_MAX_LENGTH = 400</text></g><path d="M 1792.5 606 L 2067.5 606" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1792.5" y="610" width="275" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1797-615-267-26-0)" font-size="12px"><text x="1798" y="627.5">+ validate_task_comment_request_data(data)</text></g><rect x="470" y="3420" width="410" height="560" rx="61.5" ry="61.5" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><rect x="2610" y="410" width="1640" height="3740" rx="246" ry="246" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><rect x="1530" y="1070" width="920" height="760" rx="114" ry="114" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><rect x="1450" y="2010" width="1020" height="1150" rx="153" ry="153" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><rect x="260" y="4070" width="740" height="570" rx="85.5" ry="85.5" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><path d="M 2700 576 L 2700 550 L 3260 550 L 3260 576" fill="#ffffff" stroke="#ff0000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2700 576 L 2700 2620 L 3260 2620 L 3260 576" fill="none" stroke="#ff0000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2700 576 L 3260 576" fill="none" stroke="#ff0000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2979.5" y="567.5">user.py</text></g><rect x="2700" y="576" width="560" height="74" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2704-581-552-74-0)" font-size="12px"><text x="2705.5" y="593.5">users_ns=Namespace("Users", description="Operations related to users")</text><text x="2705.5" y="607.5">add_models_to_namespace(users_ns) </text><text x="2705.5" y="635.5">DAO = UserDAO()</text></g><path d="M 2700 654 L 3260 654" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="2700" y="658" width="560" height="1962" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2704-663-552-1962-0)" font-size="12px"><text x="2705.5" y="675.5">standard responses:  </text><text x="2705.5" y="689.5">401: messages.TOKEN_HAS_EXPIRED,</text><text x="2705.5" y="703.5">        messages.TOKEN_IS_INVALID,</text><text x="2705.5" y="717.5">        messages.AUTHORISATION_TOKEN_OS_MISSING</text><text x="2705.5" y="731.5">404: messages.USER_DOES_NOT_EXIST</text><text x="2705.5" y="759.5">@users_ns.route("users"), @users_ns.response(401)</text><text x="2705.5" y="773.5">UserList(Resource)</text><text x="2705.5" y="787.5">   @classmethod, @jwt_required</text><text x="2705.5" y="801.5">   @users_ns.doc("list_users", params={"search": "Search query"})</text><text x="2705.5" y="815.5">   @users_ns.doc(responses=401)</text><text x="2705.5" y="829.5">   @users_ns.marshall_list_with(public_user_api_model)</text><text x="2705.5" y="843.5">   @users_ns.expect(auth_header_parser)</text><text x="2705.5" y="857.5">   + get(cls) -&gt; DAO.list_users(user_id, request.args.get("search", ""))</text><text x="2705.5" y="885.5">@users_ns.route("users/&lt;int:user_id&gt;")</text><text x="2705.5" y="899.5">@users_ns.param("user_id", "The user identifier")</text><text x="2705.5" y="913.5">OtherUser(Resource)   -----&gt; Admin user??</text><text x="2705.5" y="927.5">  @classmethod, @jwt_required</text><text x="2705.5" y="941.5">  @users_ns.doc("get_user")</text><text x="2705.5" y="955.5">  @users_ns.expect(auth_header_parser)</text><text x="2705.5" y="969.5">  @users_ns.response(201, "Success.", public_user_api_model)</text><text x="2705.5" y="983.5">  @users_ns.response(400, messages.USER_ID_IS_NOT_VALID)</text><text x="2705.5" y="997.5">  + get(cls, user_id) -&gt; if valid, DAO.get_user(user_id)</text><text x="2705.5" y="1025.5">  @staticmethod</text><text x="2705.5" y="1039.5">  + validate_param(user_id)</text><text x="2705.5" y="1067.5">@users_ns.route("user"), @users_ns.response(401,404)</text><text x="2705.5" y="1081.5">MyUserProfile(Resource)</text><text x="2705.5" y="1095.5">  @classmethod, @jwt_required</text><text x="2705.5" y="1109.5">  @users_ns.doc("get_user")</text><text x="2705.5" y="1123.5">  @users_ns.expect(auth_header_parser, validate=True)</text><text x="2705.5" y="1137.5">  @users_ns.marshal_with(full_user_api_model)</text><text x="2705.5" y="1151.5">  + get(cls) -&gt; DAO.get_user(user_id)</text><text x="2705.5" y="1179.5">  @classmethod, @jwt_required</text><text x="2705.5" y="1193.5">  @users_ns.doc("update_user_profile")</text><text x="2705.5" y="1207.5">  @users_ns.expect(auth_header_parser, update_user_request_body_model)</text><text x="2705.5" y="1221.5">  @users_ns.response(200, messages.USER_SUCCESSFULLY_UPDATED)</text><text x="2705.5" y="1235.5">  @users_ns.response(400, "Invalid input")</text><text x="2705.5" y="1249.5">  + put(cls) -&gt; if valid, DAO.update_user_profile(user_id, data)</text><text x="2705.5" y="1277.5">  @classmethod, @jwt_required</text><text x="2705.5" y="1291.5">  @users_ns.doc("delete_user")</text><text x="2705.5" y="1305.5">  @users_ns.expect(auth_header_parser, validate=True)</text><text x="2705.5" y="1319.5">  @users_ns.response(200, messages. USER_SUCCESSFULLY_DELETED)</text><text x="2705.5" y="1333.5">  + delete(cls) -&gt; DAO.delete_user(user_id)</text><text x="2705.5" y="1361.5">@users_ns.response(201, messages.PASSWORD_SUCCESSFULLY_UPDATED)</text><text x="2705.5" y="1375.5">@users_ns.response(400, messages.USER_ENTERED_INCORRECT_PASSWORD)</text><text x="2705.5" y="1389.5">@users_ns.response(401)</text><text x="2705.5" y="1403.5">@users_ns.route("user/change_password")</text><text x="2705.5" y="1417.5">ChangeUserPassword(Resource)</text><text x="2705.5" y="1431.5">  @classmethod, @jwt_required</text><text x="2705.5" y="1445.5">  @users_ns.doc("update_user_password")</text><text x="2705.5" y="1459.5">  @users_ns.expect(auth_header_parser, change_password_request_data_model, </text><text x="2705.5" y="1473.5">                                 validate=True)</text><text x="2705.5" y="1487.5">  + put(cls) -&gt; if valid, DAO.change_password(user_id, data)</text><text x="2705.5" y="1515.5">@users_ns.response(401)</text><text x="2705.5" y="1529.5">@users_ns.route("users/verified")</text><text x="2705.5" y="1543.5">VerifiedUser(Resource)</text><text x="2705.5" y="1557.5">  @classmethod, @jwt_required</text><text x="2705.5" y="1571.5">  @users_ns.doc("get_verified_users", params={"search": "Search query"})</text><text x="2705.5" y="1585.5">  @users_ns.doc(responses=401)</text><text x="2705.5" y="1599.5">  @users_ns.marshal_list_with(public_user_api_model)</text><text x="2705.5" y="1613.5">  @users_ns.expect(auth_header_parser)</text><text x="2705.5" y="1627.5">  + get(cls) -&gt; DAO.list_users(user_id, request.args.get("search", ""), is_verified=True</text><text x="2705.5" y="1655.5">@users_ns.route("register")</text><text x="2705.5" y="1669.5">UserRegister(Resource)</text><text x="2705.5" y="1683.5">  @classmethod</text><text x="2705.5" y="1697.5">  @users_ns.doc("create_user")</text><text x="2705.5" y="1711.5">  @users_ns.response(200, messages.USER_WAS_CREATED_SUCCESSFULLY)</text><text x="2705.5" y="1725.5">  @users_ns.response(400, messages.USER_USES_A_USERNAME_THAT_ALREADY_EXISTS,</text><text x="2705.5" y="1739.5">                                             messages.USER_USES_AN_EMAIL_ID_THAT_ALREADY_EXISTS)</text><text x="2705.5" y="1753.5">  @users_ns.expect(register_user_api_model, validate=True)</text><text x="2705.5" y="1767.5">  + post(cls) -&gt; if request data is_valid, UserDAO.create_user(data)</text><text x="2705.5" y="1795.5">@users_ns.route("user/confirm_email/&lt;string:token&gt;")</text><text x="2705.5" y="1809.5">@users_ns.response(200, messages.USER_SUCCESSFULLY_CREATED,</text><text x="2705.5" y="1823.5">                                            messages.ACCOUNT_ALREADY_CONFIRMED_AND_THANKS)</text><text x="2705.5" y="1837.5">@users_ns.response(400, messages.EMAIL_EXPIRED_OR_TOKEN_IS_INVALID</text><text x="2705.5" y="1851.5">@users_ns.param("token", "Token sent to the user's email)</text><text x="2705.5" y="1865.5">UserEmailConfirmation(Resource)</text><text x="2705.5" y="1879.5">  @classmethod</text><text x="2705.5" y="1893.5">  + get(cls, token) -&gt; DAO.confirm_registration(token)</text><text x="2705.5" y="1921.5">@users_ns.route("user/resend_email")</text><text x="2705.5" y="1935.5">@users_ns.response(200, messages.EMAIL_VERIFICATION_MESSAGE)</text><text x="2705.5" y="1949.5">@users_ns.response(400, "Invalid input")</text><text x="2705.5" y="1963.5">@users_ns.response(403, "messages.USER_ALREADY_CONFIRMED_ACCOUNT)</text><text x="2705.5" y="1977.5">@users_ns.response(404, messages.USER_DOES_NOT_EXIST)</text><text x="2705.5" y="1991.5">UserResendEmailConfirmation(Resource)</text><text x="2705.5" y="2005.5">  @classmethod</text><text x="2705.5" y="2019.5">  @users_ns.expect(resend_email_request_body_model)</text><text x="2705.5" y="2033.5">  + post(cls) -&gt; if request data is valid, DAO.get_user_by_email(data["email"])</text><text x="2705.5" y="2047.5">                          then send_email_verification_message(user.name, data['email'])</text><text x="2705.5" y="2075.5">@users_ns.route("refresh")</text><text x="2705.5" y="2089.5">RefreshUser(Resource)</text><text x="2705.5" y="2103.5">  @classmethod, @jwt_refresh_token_required</text><text x="2705.5" y="2117.5">  @users_ns.doc("refresh")</text><text x="2705.5" y="2131.5">  @users_ns.response(200, 'Successful refresh', refresh_response_body_model)</text><text x="2705.5" y="2145.5">  @users_ns.response(401)</text><text x="2705.5" y="2159.5">  @users_ns.expect(auth_header_parser)</text><text x="2705.5" y="2173.5">  + post(cls) -&gt; new jwt token</text><text x="2705.5" y="2201.5">@users_ns.route("login")</text><text x="2705.5" y="2215.5">LoginUser(Resource)</text><text x="2705.5" y="2229.5">  @classmethod</text><text x="2705.5" y="2243.5">  @users_ns.doc("login")</text><text x="2705.5" y="2257.5">  @users_ns.response(200, "Successful login", login_response_body_model)</text><text x="2705.5" y="2271.5">  @users_ns.response(400, messages.USERNAME_FIELD_IS_MISSING; </text><text x="2705.5" y="2285.5">                                              messages.PASSWORD_FIELD_IS_MISSING)</text><text x="2705.5" y="2299.5">  + post(cls) =&gt; if valid, DAO.authenticate(username, password) + jwt token</text><text x="2705.5" y="2327.5">@users_ns.route("home")</text><text x="2705.5" y="2341.5">@users_ns.doc("home")</text><text x="2705.5" y="2355.5">@users_ns.expect(auth_header_parser, validate=True)</text><text x="2705.5" y="2369.5">@users_ns.response(200, "Successful response" home_response_body_model)</text><text x="2705.5" y="2383.5">@users_ns.response(401)</text><text x="2705.5" y="2397.5">@users_ns.response(404, messages.USER_NOT_FOUND)</text><text x="2705.5" y="2411.5">UserHomeStatistics(Resource)</text><text x="2705.5" y="2425.5">  @classmethod, @jwt_required</text><text x="2705.5" y="2439.5">  @users_ns.expect(auth_header_parser)</text><text x="2705.5" y="2453.5">  + get(cls) =&gt; DAO.get_user_statistics(user_id)</text><text x="2705.5" y="2495.5">@users_cs.route("dashboard")</text><text x="2705.5" y="2509.5">@users_ns.expect(auth_header_parser, validate=True)</text><text x="2705.5" y="2523.5">@users_ns.response(200, "Successful response", dashboard_response_body_model)</text><text x="2705.5" y="2537.5">@users_ns.response(404, "User not found") &lt;= CHANGE SO IT REFERS TO messages.py</text><text x="2705.5" y="2551.5">UserDashboard(Resource)</text><text x="2705.5" y="2565.5">  @classmethod, @jwt_required</text><text x="2705.5" y="2579.5">  @users_ns.expect(auth_header_parser)</text><text x="2705.5" y="2593.5">  + get(cls) =&gt; DAO.get_user_dashboard(user_id)</text></g><path d="M 3490 576 L 3490 550 L 4160 550 L 4160 576" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 3490 576 L 3490 4030 L 4160 4030 L 4160 576" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 3490 576 L 4160 576" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="3824.5" y="567.5">mentorship_relation.py</text></g><rect x="3490" y="576" width="670" height="94" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-3494-581-662-94-0)" font-size="12px"><text x="3495.5" y="593.5">mentorship_relation_ns=Namespace("Mentorship Relation", </text><text x="3495.5" y="607.5">                                                             description="Operation related to "mentorship relations" between users")</text><text x="3495.5" y="621.5">add_models_to_namespace(mentorship_relation_ns)</text><text x="3495.5" y="649.5">DAO = MentorshipRelationDAO()</text><text x="3495.5" y="663.5">userDAO = UserDAO()</text></g><path d="M 3490 674 L 4160 674" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="3490" y="678" width="670" height="3352" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-3494-683-662-3352-0)" font-size="12px"><text x="3495.5" y="695.5">standard responses: </text><text x="3495.5" y="709.5">401: messages.TOKEN_HAS_EXPIRED,</text><text x="3495.5" y="723.5">        messages.TOKEN_IS_INVALID,</text><text x="3495.5" y="737.5">        messages.AUTHORISATION_TOKEN_OS_MISSING</text><text x="3495.5" y="765.5">@mentorship_relation_ns.route("mentorship_relation/send_request")</text><text x="3495.5" y="779.5">SendRequest(Resource)</text><text x="3495.5" y="793.5">  @classmethod, @jwt_required</text><text x="3495.5" y="807.5">  @mentorship_relation_ns.doc("send_request")</text><text x="3495.5" y="821.5">  @mentorship_relation_ns.expect(auth_header_parser, send_mentorship_request_body)</text><text x="3495.5" y="835.5">  @mentorship_relation_ns.response(200, messages.MENTORSHIP_RELATION_WAS_SENT_SUCCESSFULLY)</text><text x="3495.5" y="849.5">  @mentorship_relation_ns.response(400, messages.MATCH_EITHER_MENTOR_OR_MENTEE</text><text x="3495.5" y="863.5">                                                                    messages.MENTOR_ID_SAME_AS_MENTEE_ID</text><text x="3495.5" y="877.5">                                                                    messages.END_TIME_BEFORE_PRESENT</text><text x="3495.5" y="891.5">                                                                    messages.MENTOR_TIME_GREATER_THAN_MAX_TIME</text><text x="3495.5" y="905.5">                                                                    messages.MENTOR_TIME_LESS_THAN_MIN_TIME</text><text x="3495.5" y="919.5">                                                                    messages.MENTOR_NOT_AVAILABLE_TO_MENTOR</text><text x="3495.5" y="933.5">                                                                    messages.MENTEE_NOT_AVAIL_TO_BE_MENTORED</text><text x="3495.5" y="947.5">                                                                    messages.MENTOR_ALREADY_IN_A_RELATION</text><text x="3495.5" y="961.5">                                                                    messages.MENTEE_ALREADY_IN_A_RELATION</text><text x="3495.5" y="975.5">                                                             401)</text><text x="3495.5" y="989.5">  @mentorship_relation_ns.response(404, messages.MENTOR_DOES_NOT_EXIST</text><text x="3495.5" y="1003.5">                                                                                     MENTEE_DOES_NOT_EXIST)</text><text x="3495.5" y="1017.5">  + post(cls) =&gt; if valid, DAO.create_mentorship_relation(user_sender_id, data)</text><text x="3495.5" y="1031.5">                        ==&gt; user_sender = userDAO.get_user(user_recipient_id)</text><text x="3495.5" y="1045.5">                        ==&gt; user_recipient = userDAO.get_user(user_recipient_id)</text><text x="3495.5" y="1059.5">                              etc</text><text x="3495.5" y="1087.5">  @ staticmethod</text><text x="3495.5" y="1101.5">  + is_valid_data(data)</text><text x="3495.5" y="1115.5">    ==&gt; error responses if not valid: messages.MENTOR_ID_FIELD_IS_MISSING</text><text x="3495.5" y="1129.5">                                                                         MENTEE_ID_FIELD_IS_MISSING</text><text x="3495.5" y="1143.5">                                                                         END_DATE_FIELD_IS_MISSING</text><text x="3495.5" y="1157.5">                                                                         NOTES_FIELD_ID_MISSING</text><text x="3495.5" y="1185.5">@mentorship_relation_ns.route("mentorship_relations")</text><text x="3495.5" y="1199.5">GetAllMyMentorshipRelation(Resource)</text><text x="3495.5" y="1213.5">  @classmethod, @jwt_required</text><text x="3495.5" y="1227.5">  @mentorship_relation_ns.doc("get_all_user_mentorship_relations")</text><text x="3495.5" y="1241.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="1255.5">  @mentorship_relation_ns.param(name="relation_state", description="Mentorship relation state filter."</text><text x="3495.5" y="1269.5">                                                        _in="query")</text><text x="3495.5" y="1283.5">  @mentorship_relation_ns.response(200, "Return all users' mentorship relations, filtered by the relation state, </text><text x="3495.5" y="1297.5">                                                            was successful.", model=mentorship_request_response_body)</text><text x="3495.5" y="1311.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="1325.5">  @mentorship_relation_ns.marshall_list_with(mentorship_request_response_body)</text><text x="3495.5" y="1339.5">  + get(cls) =&gt; DAO.list_mentorship_relations(user_id=user_id, state=rel_state_filter)</text><text x="3495.5" y="1367.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: request_id&gt;/accept")</text><text x="3495.5" y="1381.5">AcceptMentorshipRelation(Resource)</text><text x="3495.5" y="1395.5">  @classmethod, @jwt_required</text><text x="3495.5" y="1409.5">  @mentorship_relation_ns.doc("accept_mentorship_relation")</text><text x="3495.5" y="1423.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="1437.5">  @mentorship_relation_ns.response(200, messages.MENTORSHIP_RELATION_WAS_ACCEPTED_SUCCESSFULLY)</text><text x="3495.5" y="1451.5">  @mentorship_relation_ns.response(400, messages.NOT_PENDING_STATE_RELATION</text><text x="3495.5" y="1465.5">                                                                                     CANT_ACCEPT_MENTOR_REQ_SENT_BY_USER</text><text x="3495.5" y="1479.5">                                                                                     CANT_ACCEPT_UNINVOLVED_MENTOR_RELATION</text><text x="3495.5" y="1493.5">                                                                                     USER_IS_INVOLVED_IN_A_MENTORSHIP_RELATION)</text><text x="3495.5" y="1507.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="1521.5">  @mentorship_relation_ns.response(404, messages.MENTORSHIP_RELATION_REQUEST_DOES_NOT_EXIST)</text><text x="3495.5" y="1535.5">  + put(cls, request_id) =&gt; DAO.accept_request(user_id=user_id, request_id=request_id)</text><text x="3495.5" y="1549.5">                                          if successful, send_email_mentorship_relation_accepted(request_id)</text><text x="3495.5" y="1577.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: request_id&gt;/reject")</text><text x="3495.5" y="1591.5">RejectMentorshipRelation(Resource)</text><text x="3495.5" y="1605.5">  @classmethod, @jwt_required</text><text x="3495.5" y="1619.5">  @mentorship_relation_ns.doc("reject_mentorship_relation")</text><text x="3495.5" y="1633.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="1647.5">  @mentorship_relation_ns.response(200, messages.MENTORSHIP_RELATION_WAS_REJECTED_SUCCESSFULLY)</text><text x="3495.5" y="1661.5">  @mentorship_relation_ns.response(400, messages.NOT_PENDING_STATE_RELATION</text><text x="3495.5" y="1675.5">                                                                                     USER_CANT_REJECT_REQUEST_SENT_BY_USER</text><text x="3495.5" y="1689.5">                                                                                     CANT_REJECT_UNINVOLVED_RELATION_REQUEST)</text><text x="3495.5" y="1703.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="1717.5">  @mentorship_relation_ns.response(404, messages.MENTORSHIP_RELATION_REQUEST_DOES_NOT_EXIST)</text><text x="3495.5" y="1731.5">  + put(cls, request_id) =&gt; DAO.reject_request(user_id=user_id, request_id=request_id)</text><text x="3495.5" y="1759.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: request_id&gt;/cancel")</text><text x="3495.5" y="1773.5">CancelMentorshipRelation(Resource)</text><text x="3495.5" y="1787.5">  @classmethod, @jwt_required</text><text x="3495.5" y="1801.5">  @mentorship_relation_ns.doc("cancel_mentorship_relation")</text><text x="3495.5" y="1815.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="1829.5">  @mentorship_relation_ns.response(200, messages.MENTORSHIP_RELATION_WAS_CANCELLED_SUCCESSFULLY')</text><text x="3495.5" y="1843.5">  @mentorship_relation_ns.response(400, messages.UNACCEPTED_STATE_RELATION, </text><text x="3495.5" y="1857.5">                                                                                     CANT_CANCEL_UNINVOLED_REQUEST)</text><text x="3495.5" y="1871.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="1885.5">  @mentorship_relation_ns.response(404, messages.MENTORSHIP_RELATION_REQUEST_DOES_NOT_EXIST)</text><text x="3495.5" y="1899.5">  + put(cls, request_id) =&gt; DAO.cancel_relation(user_id=user_id, request_id=request_id)</text><text x="3495.5" y="1927.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: request_id&gt;")</text><text x="3495.5" y="1941.5">DeleteMentorshipRelation(Resource)</text><text x="3495.5" y="1955.5">  @classmethod, @jwt_required</text><text x="3495.5" y="1969.5">  @mentorship_relation_ns.doc("delete_mentorship_relation")</text><text x="3495.5" y="1983.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="1997.5">  @mentorship_relation_ns.response(200, messages.MENTORSHIP_RELATION_WAS_DELETED_SUCCESSFULLY')</text><text x="3495.5" y="2011.5">  @mentorship_relation_ns.response(400, messages.NOT_PENDING_STATE_RELATION</text><text x="3495.5" y="2025.5">                                                                                     CANT_DELETE_UNINVOLVED_REQUEST)</text><text x="3495.5" y="2039.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="2053.5">  @mentorship_relation_ns.response(404, messages.MENTORSHIP_RELATION_REQUEST_DOES_NOT_EXIST)</text><text x="3495.5" y="2067.5">  + delete(cls, request_id) =&gt; DAO.delete_request(user_id=user_id, request_id=request_id)</text><text x="3495.5" y="2095.5">@mentorship_relation_ns.route("mentorship_relations/past")</text><text x="3495.5" y="2109.5">ListPastMentorshipRelations(Resource)</text><text x="3495.5" y="2123.5">  @classmethod, @jwt_required</text><text x="3495.5" y="2137.5">  @mentorship_relation_ns.doc("delete_mentorship_relation")</text><text x="3495.5" y="2151.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="2165.5">  @mentorship_relation_ns.response(200, "Returned past mentorship relations with success.", </text><text x="3495.5" y="2179.5">                                                                     model=mentorship_request_response_body)</text><text x="3495.5" y="2193.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="2207.5">  @mentorship_relation_ns.marshal_list_with(mentorship_request_response_body)</text><text x="3495.5" y="2221.5">  + get(cls) =&gt; DAO.list_past_mentorship_relations(user_id)</text><text x="3495.5" y="2249.5">@mentorship_relation_ns.route("mentorship_relations/current")</text><text x="3495.5" y="2263.5">ListCurrentMentorshipRelation(Resource)</text><text x="3495.5" y="2277.5">  @classmethod, @jwt_required</text><text x="3495.5" y="2291.5">  @mentorship_relation.ns.doc("get_current_mentorship_relation")</text><text x="3495.5" y="2305.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="2319.5">  @mentorship_relation_ns.response(200, "Returned current mentorship relation with success."</text><text x="3495.5" y="2333.5">                                                                    model=mentorship_request_response_body)</text><text x="3495.5" y="2347.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="2361.5">  + get(cls) =&gt; DAO.list_current_mentorship_relations(user_id)</text><text x="3495.5" y="2375.5">                       if isinstance(response, MentorshipRelationModel) =&gt; marshal(response, mentorship_request_response_body)</text><text x="3495.5" y="2403.5">@mentorship_relation_ns.route("mentorship_relations/pending")</text><text x="3495.5" y="2417.5">ListPendingMentorshipRequests(Resource)</text><text x="3495.5" y="2431.5">  @classmethod, @jwt_required</text><text x="3495.5" y="2445.5">  @mentorship_relation.ns.doc("get_pending_mentorship_relation")</text><text x="3495.5" y="2459.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="2473.5">  @mentorship_relation_ns.response(200, "Returned pending mentorship relation with success.",</text><text x="3495.5" y="2487.5">                                                                      model=mentorship_request_response_body)</text><text x="3495.5" y="2501.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="2515.5">  @mentorship_relation_ns.marshall_list_with(mentorship_request_response_body)</text><text x="3495.5" y="2529.5">  + get(cls) =&gt; DAO.list_pending_mentorship_relations(user_id)</text><text x="3495.5" y="2557.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: request_id&gt;/task")</text><text x="3495.5" y="2571.5">CreateTask(Resource)</text><text x="3495.5" y="2585.5">  @classmethod, @jwt_required</text><text x="3495.5" y="2599.5">  @mentorship_relation.ns.doc("create_task_in_mentorship_relation")</text><text x="3495.5" y="2613.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="2627.5">  @mentorship_relation_ns.response(201, messages.TASK_WAS_CREATED_SUCCESSFULLY)</text><text x="3495.5" y="2641.5">  @mentorship_relation_ns.response(400, messages.UNACCEPTED_STATE_RELATION)</text><text x="3495.5" y="2655.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="2669.5">  + post(cls, request_id) =&gt; CreateTask.is_valid_data(request_body)</text><text x="3495.5" y="2683.5">                                            if valid then =&gt; TaskDAO.create_Task(user_id=user_id, mentorship_relation_id=request_id, </text><text x="3495.5" y="2697.5">                                                                     data=request_body)</text><text x="3495.5" y="2725.5"> @staticmethod</text><text x="3495.5" y="2739.5"> + is_valid_data(data) =&gt; if not, messages.DESCRIPTION_FIELD_IS_MISSING</text><text x="3495.5" y="2767.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: request_id&gt;/task/&lt;int: task_id&gt;")</text><text x="3495.5" y="2781.5">DeleteTask(Resource)</text><text x="3495.5" y="2795.5">  @classmethod, @jwt_required</text><text x="3495.5" y="2809.5">  @mentorship_relation.ns.doc("delete_task_in_mentorship_relation")</text><text x="3495.5" y="2823.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="2837.5">  @mentorship_relation_ns.response(200, messages.TASK_WAS. _DELETED_SUCCESSFULLY)</text><text x="3495.5" y="2851.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="2865.5">  @mentorship_relation_ns.response(404, messages.MENTORSHIP_RELATION_DOES_NOT_EXIST</text><text x="3495.5" y="2879.5">                                                                                     TASK_DOES_NOT_EXIST)</text><text x="3495.5" y="2893.5">  + delete(cls, request_id, task_id) =&gt; TaskDAO.delete_Task(user_id=user_id, mentorship_relation_id=request_id, </text><text x="3495.5" y="2907.5">                                                                     task=task_id)</text><text x="3495.5" y="2935.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: request_id&gt;/tasks")</text><text x="3495.5" y="2949.5">ListTasks(Resource)</text><text x="3495.5" y="2963.5">  @classmethod, @jwt_required</text><text x="3495.5" y="2977.5">  @mentorship_relation.ns.doc("lists_task_in_mentorship_relation")</text><text x="3495.5" y="2991.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="3005.5">  @mentorship_relation_ns.response(200, "List tasks from a mentorship relation with success."</text><text x="3495.5" y="3019.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="3033.5">  @mentorship_relation_ns.response(404, messages.MENTORSHIP_RELATION_DOES_NOT_EXIST)</text><text x="3495.5" y="3047.5">  + get(cls, request_id) =&gt; TaskDAO.list_tasks(user_id=user_id, mentorship_relation_id=request_id)</text><text x="3495.5" y="3061.5">                                          if isinstance(response, tuple) =&gt; response,</text><text x="3495.5" y="3075.5">                                              else marshal(response, list_tasks_response_body), 200</text><text x="3495.5" y="3103.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: request_id&gt;/task/&lt;int: task_id&gt;/complete")</text><text x="3495.5" y="3117.5">UpdateTask(Resource)</text><text x="3495.5" y="3131.5">  @classmethod, @jwt_required</text><text x="3495.5" y="3145.5">  @mentorship_relation.ns.doc("update_task_in_mentorship_relation")</text><text x="3495.5" y="3159.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="3173.5">  @mentorship_relation_ns.response(200, messages.TASK_WAS_ACHIEVED_SUCCESSFULLY)</text><text x="3495.5" y="3187.5">  @mentorship_relation_ns.response(401)</text><text x="3495.5" y="3201.5">  @mentorship_relation_ns.response(400, messages.TASK_WAS_ALREADY_ACHIEVED)</text><text x="3495.5" y="3215.5">  @mentorship_relation_ns.response(404, messages.MENTORSHIP_RELATION_DOES_NOT_EXIST</text><text x="3495.5" y="3229.5">                                                                                     TASK_DOES_NOT_EXIST)</text><text x="3495.5" y="3243.5">  + put(cls, request_id, task_id) =&gt; TaskDAO.complete_task(user_id=user_id, mentorship_relation_id=request_id, </text><text x="3495.5" y="3257.5">                                                                     task=task_id)</text><text x="3495.5" y="3285.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: relation_id&gt;/task/&lt;int: task_id&gt;/comment")</text><text x="3495.5" y="3299.5">CreateTaskComment(Resource)</text><text x="3495.5" y="3313.5">  @classmethod, @jwt_required</text><text x="3495.5" y="3327.5">  @mentorship_relation_ns.expect(auth_header_parser, task_comment_model)</text><text x="3495.5" y="3341.5">  @mentorship_relation_ns.doc(</text><text x="3495.5" y="3355.5">                        responses={</text><text x="3495.5" y="3369.5">                            201: messages.TASK_COMMENT_WAS CREATED_SUCCESSFULLY,</text><text x="3495.5" y="3383.5">                            400:                   COMMENT_FIELD_IS_MISSING, COMMENT_NOT_IN_STRING_FORMAT</text><text x="3495.5" y="3397.5">                                     get_length_validation_error_message('comment', None, COMMENT_MAX_LENGTH)</text><text x="3495.5" y="3411.5">                                    messages.UNACCEPTED_STATE_RELATION</text><text x="3495.5" y="3425.5">                                                      TASK_COMMENT_WAS_NOT_CREATED_BY_YOU</text><text x="3495.5" y="3439.5">                            401: (as above) + USER_NOT_INVOLVED_IN_THIS_MENTOR_RELATION</text><text x="3495.5" y="3453.5">                            404: messages.USER_DOES_NOT_EXIST, messages.MENTORSHIP_RELATION_DOES_NOT_EXIST</text><text x="3495.5" y="3467.5">                                                     TASK_DOES_NOT_EXIST, messages.TASK_COMMENT_DOES_NOT_EXIST</text><text x="3495.5" y="3481.5">                                                     TASK_COMMENT_WITH_GIVEN_TASK_ID_DOES_NOT_EXIST})</text><text x="3495.5" y="3495.5">  + put(cls, relation_id, task_id, comment_id) =&gt; validate_task_comment_request(data)</text><text x="3495.5" y="3509.5">                                                                             if valid, TaskCommentDAO.modify_comment(get_jwt_identity(),</text><text x="3495.5" y="3523.5">                                                                                                                         comment_id, task_id, relation_id, comment)</text><text x="3495.5" y="3551.5">  @classmethod, @jwt_required  </text><text x="3495.5" y="3565.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="3579.5">  @mentorship_relation_ns.doc(</text><text x="3495.5" y="3593.5">                        responses={</text><text x="3495.5" y="3607.5">                            200: messages.TASK_COMMENT_WAS_DELETED_SUCCESSFULLY</text><text x="3495.5" y="3621.5">                            400:                  UNACCEPTED_STATE_RELATION, </text><text x="3495.5" y="3635.5">                                                     TASK_COMMENT_WAS_NOT_CREATED_BY_YOU_DELETE</text><text x="3495.5" y="3649.5">                            401: (as above) + USER_NOT_INVOLVED_IN_THIS_MENTOR_RELATION</text><text x="3495.5" y="3663.5">                            404: messages.USER_DOES_NOT_EXIST, messages.MENTORSHIP_RELATION_DOES_NOT_EXIST</text><text x="3495.5" y="3677.5">                                                     TASK_DOES_NOT_EXIST, messages.TASK_COMMENT_DOES_NOT_EXIST</text><text x="3495.5" y="3691.5">                                                     TASK_COMMENT_WITH_GIVEN_TASK_ID_DOES_NOT_EXIST})</text><text x="3495.5" y="3705.5">  + put delete(cls, relation_id, task_id, comment_id) =&gt; TaskCommentDAO.delete_comment(get_jwt_identity(),</text><text x="3495.5" y="3719.5">                                                                                                                         comment_id, task_id, relation_id)</text><text x="3495.5" y="3747.5">@mentorship_relation_ns.route("mentorship_relation/&lt;int: relation_id&gt;/task/&lt;int: task_id&gt;/comments")</text><text x="3495.5" y="3761.5">TaskComments(Resource)</text><text x="3495.5" y="3775.5">  @classmethod, @jwt_required</text><text x="3495.5" y="3789.5">  @mentorship_relation_ns.expect(auth_header_parser)</text><text x="3495.5" y="3803.5">  @mentorship_relation_ns.response(200, messages.LIST_TASK_COMMENTS_WITH_SUCCESS["messages"],</text><text x="3495.5" y="3817.5">                                                                                                                                         task_comments_model)</text><text x="3495.5" y="3831.5">  @mentorship_relation_ns.doc(</text><text x="3495.5" y="3845.5">                        responses={</text><text x="3495.5" y="3859.5">                            400: messages.UNACCEPTED_STATE_RELATION</text><text x="3495.5" y="3873.5">                            401: (as above) + USER_NOT_INVOLVED_IN_THIS_MENTOR_RELATION</text><text x="3495.5" y="3887.5">                            404: messages.USER_DOES_NOT_EXIST, messages.MENTORSHIP_RELATION_DOES_NOT_EXIST</text><text x="3495.5" y="3901.5">                                                     TASK_DOES_NOT_EXIST})</text><text x="3495.5" y="3915.5">  + get(cls, relation_id, task_id) =&gt; TaskCommentDAO.get_all_task_comments_by_task_id(get_jwt_identity(), </text><text x="3495.5" y="3929.5">                                                                                                                                            task_id, relation_id)</text><text x="3495.5" y="3943.5">                                                       if isinstance(response, tuple) =&gt; response, </text><text x="3495.5" y="3957.5">                                                                   else marshal(response, task_comments_model), 200</text></g><path d="M 1590 1586 L 1590 1560 L 1870 1560 L 1870 1586" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1590 1586 L 1590 1684 L 1870 1684 L 1870 1586" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1590 1586 L 1870 1586" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1729.5" y="1577.5">admin.py</text></g><rect x="1590" y="1586" width="280" height="64" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1594-1591-272-64-0)" font-size="12px"><text x="1595.5" y="1603.5">(Models)</text><text x="1595.5" y="1617.5">+ assign_and_revoke_user_admin_request_body</text><text x="1595.5" y="1631.5">+ public_admin_user_api_model</text></g><path d="M 1590 1654 L 1870 1654" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1590" y="1658" width="280" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1594-1663-272-26-0)" font-size="12px"><text x="1595.5" y="1675.5">+ add_models_to_namespace(api_namespace)</text></g><path d="M 1980 1236 L 1980 1210 L 2380 1210 L 2380 1236" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1980 1236 L 1980 1424 L 2380 1424 L 2380 1236" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1980 1236 L 2380 1236" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2179.5" y="1227.5">mentorship_relation.py</text></g><rect x="1980" y="1236" width="400" height="154" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1984-1241-392-154-0)" font-size="12px"><text x="1985.5" y="1253.5">(Models)</text><text x="1985.5" y="1267.5">+ send_mentorship_request_body</text><text x="1985.5" y="1281.5">+ mentorship_request_response_body</text><text x="1985.5" y="1295.5">+ relation_user_response_body</text><text x="1985.5" y="1309.5">+ create_task_request_body</text><text x="1985.5" y="1323.5">+ list_tasks_response_body</text><text x="1985.5" y="1337.5">+ mentorship_request_response_body_for_user_dashboard_body</text><text x="1985.5" y="1351.5">+ user_dashboard_user_details</text><text x="1985.5" y="1365.5">+ task_comment_model</text><text x="1985.5" y="1379.5">+ task_comments_model</text></g><path d="M 1980 1394 L 2380 1394" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1980" y="1398" width="400" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1984-1403-392-26-0)" font-size="12px"><text x="1985.5" y="1415.5">+ add_models_to_namespace(api_namespace)</text></g><path d="M 900 1266 L 900 1240 L 1330 1240 L 1330 1266" fill="#ffffff" stroke="#ff0000" stroke-miterlimit="10" pointer-events="none"/><path d="M 900 1266 L 900 3258 L 1330 3258 L 1330 1266" fill="none" stroke="#ff0000" stroke-miterlimit="10" pointer-events="none"/><path d="M 900 1266 L 1330 1266" fill="none" stroke="#ff0000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1114.5" y="1257.5">messages.py</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-904-1271-422-1944-0)" font-size="12px"><text x="905.5" y="1283.5">(invalid fields)</text><text x="905.5" y="1297.5">+ NAME_INPUT_BY_USER_IS_INVALID</text><text x="905.5" y="1311.5">+ TOKEN_IS_INVALID</text><text x="905.5" y="1325.5">+ USER_ID_IS_NOT_VALID</text><text x="905.5" y="1339.5">+ FIELD_NEED_MENTORING_IS_NOT_VALID</text><text x="905.5" y="1353.5">+ FIELD_AVAILABLE_TO_MENTOR_IS_INVALID</text><text x="905.5" y="1381.5">(not found)</text><text x="905.5" y="1395.5">+ MENTORSHIP_RELATION_REQUEST_DOES_NOT_EXIST</text><text x="905.5" y="1409.5">+ MENTORSHIP_RELATION_DOES_NOT_EXIST</text><text x="905.5" y="1423.5">+ USER_NOT_FOUND</text><text x="905.5" y="1437.5">+ MENTOR_DOES_NOT_EXIST</text><text x="905.5" y="1451.5">+ MENTEE_DOES_NOT_EXIST</text><text x="905.5" y="1465.5">+ TASK_DOES_NOT_EXIST</text><text x="905.5" y="1479.5">+ USER_DOES_NOT_EXIST</text><text x="905.5" y="1493.5">+ TASK_COMMENT_DOES_NOT_EXIST</text><text x="905.5" y="1507.5">+ TASK_COMMENT_WITH_GIVEN_TASK_ID_DOES_NOT_EXIST</text><text x="905.5" y="1535.5">(missing fields)</text><text x="905.5" y="1549.5">+ MENTOR_ID_FIELD_IS_MISSING</text><text x="905.5" y="1563.5">+ MENTEE_ID_FIELD_IS_MISSING</text><text x="905.5" y="1577.5">+ END_DATE_FIELD_IS_MISSING</text><text x="905.5" y="1591.5">+ NOTES_FIELDS_IS_MISSING</text><text x="905.5" y="1605.5">+ USERNAME_FIELD_IS_MISSING</text><text x="905.5" y="1619.5">+ PASSWORD_FIELD_IS_MISSING</text><text x="905.5" y="1633.5">+ NAME_FIELD_IS_MISSING</text><text x="905.5" y="1647.5">+ EMAIL_FIELD_IS_MISSING</text><text x="905.5" y="1661.5">+ TERMS_AND_CONDITIONS_FIELD_IS_MISSING</text><text x="905.5" y="1675.5">+ CURRENT_PASSWORD_FIELD_IS_MISSING</text><text x="905.5" y="1689.5">+ NEW_PASSWORD_FIELD_IS_MISSING</text><text x="905.5" y="1703.5">+ AUTHORISATION_TOKEN_IS_MISSING</text><text x="905.5" y="1717.5">+ DESCRIPTION_FIELD_IS_MISSING</text><text x="905.5" y="1731.5">+ COMMENT_FIELD_IS_MISSING</text><text x="905.5" y="1759.5">(admin)</text><text x="905.5" y="1773.5">+ USER_IS_ALREADY_AN_ADMIN</text><text x="905.5" y="1787.5">+ USER_CANNOT_BE_ASSIGNED_ADMIN_BY_USER</text><text x="905.5" y="1801.5">+ USER_IS_NOT_AN_ADMIN</text><text x="905.5" y="1815.5">+ USER_ADMIN_STATUS_WAS_REVOKED</text><text x="905.5" y="1829.5">+ USER_CANT_DELETE</text><text x="905.5" y="1843.5">+ USER_CANNOT_REVOKE_ADMIN_STATUS</text><text x="905.5" y="1857.5">+ USER_ASSIGN_NOT_ADMIN</text><text x="905.5" y="1871.5">+ USER_REVOKE_NOT_ADMIN</text><text x="905.5" y="1885.5">+ USER_IS_NOW_AN_ADMIN</text><text x="905.5" y="1913.5">(mentor availability)</text><text x="905.5" y="1927.5">+ MENTOR_NOT_AVAILABLE_TO_MENTOR</text><text x="905.5" y="1941.5">+ MENTOR_ALREADY_IN_A_RELATION</text><text x="905.5" y="1969.5">(mentee availability)</text><text x="905.5" y="1983.5">+ MENTEE_NOT_AVAIL_TO_BE_MENTORED</text><text x="905.5" y="1997.5">+ MENTEE_ALREADY_IN_A_RELATION</text><text x="905.5" y="2025.5">(mismatch of fields)</text><text x="905.5" y="2039.5">+ MATCH_EITHER_MENTOR_OR_MENTEE</text><text x="905.5" y="2053.5">+ TASK_COMMENT_WAS_NOT_CREATED_BY_YOU</text><text x="905.5" y="2067.5">+ TASK_COMMENT_WAS_NOT_CREATED_BY_YOU_DELETE</text><text x="905.5" y="2095.5">(update)</text><text x="905.5" y="2109.5">+ NO_DATA_FOR_UPDATING_PROFILE_WAS_SENT</text><text x="905.5" y="2137.5">(relation constraints)</text><text x="905.5" y="2151.5">+ MENTOR_ID_SAME_AS_MENTEE_ID</text><text x="905.5" y="2165.5">+ END_TIME_BEFORE_PRESENT</text><text x="905.5" y="2179.5">+ MENTOR_TIME_GREATER_THAN_MAX_TIME</text><text x="905.5" y="2193.5">+ MENTOR_TIME_LESS_THAN_MIN_TIME</text><text x="905.5" y="2207.5">+ CANT_ACCEPT_MENTOR_REQ_SENT_BY_USER</text><text x="905.5" y="2221.5">+ CANT_ACCEPT_UNINVOLVED_MENTOR_RELATION</text><text x="905.5" y="2235.5">+ USER_CANT_REJECT_REQUEST_SENT_BY_USER</text><text x="905.5" y="2249.5">+ CANT_REJECT_UNINVOLVED_RELATION_REQUEST</text><text x="905.5" y="2263.5">+ CANT_CANCEL_UNINVOLVED_REQUEST</text><text x="905.5" y="2277.5">+ CANT_DELETE_UNINVOLVED_REQUEST</text><text x="905.5" y="2291.5">+ NOT_IN_MENTORED_RELATION_CURRENTLY</text><text x="905.5" y="2305.5">+ USER_IS_INVOLVED_IN_A_MENTORSHIP_RELATION</text><text x="905.5" y="2319.5">+ USER_NOT_INVOLVED_IN_A_MENTORSHIP_RELATION</text><text x="905.5" y="2333.5">+ USER_USES_A_USERNAME_THAT_ALREADY_EXIST</text><text x="905.5" y="2347.5">+ USER_USES_AN_EMAIL_ID_THAT_ALREADY_EXIST</text><text x="905.5" y="2361.5">+ USER_IS_NOT_REGISTERED_IN_THE_SYSTEM</text><text x="905.5" y="2375.5">+ NAME_LENGTH_GREATER_THAN_MAX_LIMIT</text><text x="905.5" y="2389.5">+ NAME_LENGTH_LESSER_THAN_MAX_LIMIT</text><text x="905.5" y="2403.5">+ USER_INPUTS_INCORRECT_CONFIGURATION_VALUE</text><text x="905.5" y="2431.5">(mentorship state)</text><text x="905.5" y="2445.5">+ NOT_PENDING_STATE_RELATION</text><text x="905.5" y="2459.5">+ UNACCEPTED_STATE_RELATION</text><text x="905.5" y="2473.5">+ MENTORSHIP_RELATION_NOT_IN_ACCEPT_STATE</text><text x="905.5" y="2501.5">(login errors)</text><text x="905.5" y="2515.5">+ USER_ENTERED_INCORRECT_PASSWORD</text><text x="905.5" y="2529.5">+ USER_ENTERED_CURRENT_PASSWORD</text><text x="905.5" y="2543.5">+ EMAIL_EXPIRED_OR_TOKEN_IS_INVALID</text><text x="905.5" y="2557.5">+ WRONG_USERNAME_OR_PASSWORD</text><text x="905.5" y="2571.5">+ USER_HAS_NOT_VERIFIED_EMAIL_BEFORE_LOGIN</text><text x="905.5" y="2585.5">+ NAME_USERNAME_AND_PASSWORD_NOT_IN_STRING_FORMAT</text><text x="905.5" y="2599.5">+ COMMENT_NOT_IN_STRING_FORMAT</text><text x="905.5" y="2613.5">+ TERMS_AND_CONDITIONS_ARE_NOT_CHECKED</text><text x="905.5" y="2627.5">+ USER_INPUTS_SPACE_IN_PASSWORD</text><text x="905.5" y="2641.5">+ TOKEN_HAS_EXPIRED</text><text x="905.5" y="2655.5">+ TOKEN_SENT_TO_EMAIL_OF_USER</text><text x="905.5" y="2669.5">+ EMAIL_VERIFICATION_MESSAGE</text><text x="905.5" y="2697.5">(success messages)</text><text x="905.5" y="2711.5">+ TASK_WAS_ALREADY_ACHIEVED</text><text x="905.5" y="2725.5">+ MENTORSHIP_RELATION_WAS_SENT_SUCCESSFULLY</text><text x="905.5" y="2739.5">+ MENTORSHIP_RELATION_WAS_ACCEPTED_SUCCESSFULLY</text><text x="905.5" y="2753.5">+ MENTORSHIP_RELATION_WAS_DELETED_SUCCESSFULLY</text><text x="905.5" y="2767.5">+ MENTORSHIP_RELATION_WAS_REJECTED_SUCCESSFULLY</text><text x="905.5" y="2781.5">+ MENTORSHIP_RELATION_WAS_CANCELLED_SUCCESFULLY</text><text x="905.5" y="2795.5">+ TASK_WAS_CREATED_SUCCESSFULLY</text><text x="905.5" y="2809.5">+ TASK_WAS_DELETED_SUCCESSFULLY</text><text x="905.5" y="2823.5">+ TASK_WAS_ACHIEVED_SUCCESSFULLY</text><text x="905.5" y="2837.5">+ TASK_WAS_CREATED_SUCCESSFULLY</text><text x="905.5" y="2851.5">+ ACCEPT_MENTORSHIP_RELATIONS_WITH_SUCCESS</text><text x="905.5" y="2865.5">+ REJECTED_MENTORSHIP_RELATIONS_WITH_SUCCESS</text><text x="905.5" y="2879.5">+ DELETED_MENTORSHIP_RELATIONS_WITH_SUCCESS</text><text x="905.5" y="2893.5">+ RETURNED_PAST_MENTORSHIP_RELATIONS_WITH_SUCCESS</text><text x="905.5" y="2907.5">+ RETURNED_CURRENT_MENTORSHIP_RELATIONS_WITH_SUCCESS</text><text x="905.5" y="2921.5">+ RETURNED_PENDING_MENTORSHIP_RELATIONS_WITH_SUCCESS</text><text x="905.5" y="2935.5">+ DELETE_TASK_WITH_SUCCESS</text><text x="905.5" y="2949.5">+ UPDATED_TASK_WITH_SUCCESS</text><text x="905.5" y="2963.5">+ USER_SUCCESSFULLY_CREATED</text><text x="905.5" y="2977.5">+ USER_SUCCESSFULLY_DELETED</text><text x="905.5" y="2991.5">+ USER_SUCCESSFULLY_UPDATED</text><text x="905.5" y="3005.5">+ PASSWORD_SUCCESSFULLY_UPDATED</text><text x="905.5" y="3019.5">+ TASK_COMMENT_WAS_CREATED_SUCCESSFULLY</text><text x="905.5" y="3033.5">+ TASK_COMMENT_WAS_UPDATED_SUCCESSFULLY</text><text x="905.5" y="3047.5">+ TASK_COMMENT_WAS_DELETED_SUCCESSFULLY</text><text x="905.5" y="3061.5">+ LIST_TASK_COMMENTS_WITH_SUCCESS</text><text x="905.5" y="3089.5">(confirmation)</text><text x="905.5" y="3103.5">+ ACCOUNT_ALREADY_CONFIRMED</text><text x="905.5" y="3117.5">+ USER_ALREADY_CONFIRMED_ACCOUNT</text><text x="905.5" y="3131.5">+ ACCOUNT_ALREADY_CONFIRMED_AND_THANKS</text><text x="905.5" y="3159.5">(miscellaneous)</text><text x="905.5" y="3173.5">+ VALIDATION_ERROR</text><text x="905.5" y="3187.5">+ INVALID_END_DATE</text><text x="905.5" y="3201.5">+ NOT_IMPLEMENTED</text></g><path d="M 900 3234 L 1330 3234" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1090" y="3420" width="1380" height="1210" rx="181.5" ry="181.5" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><rect x="1250" y="3470" width="490" height="70" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 3505px; margin-left: 1495px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">app/database/models</div></div></div></foreignObject><text x="1495" y="3520" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">app/database/models</text></switch></g><rect x="530" y="4100" width="200" height="70" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 4135px; margin-left: 630px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">app/utils</div></div></div></foreignObject><text x="630" y="4150" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">app/utils</text></switch></g><rect x="510" y="3430" width="350" height="70" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 3465px; margin-left: 685px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">app/schedulers</div></div></div></foreignObject><text x="685" y="3480" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">app/schedulers</text></switch></g><path d="M 680.5 2385 L 680.5 2375 L 840.5 2375 L 840.5 2364.5 L 859.5 2380 L 840.5 2395.5 L 840.5 2385 Z" fill="none" stroke="#000000" stroke-linejoin="round" stroke-miterlimit="10" pointer-events="none"/><path d="M 760.5 1425 L 760.5 1415 L 850.5 1415 L 850.5 1404.5 L 869.5 1420 L 850.5 1435.5 L 850.5 1425 Z" fill="none" stroke="#000000" stroke-linejoin="round" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1px; height: 1px; padding-top: 1474px; margin-left: 512px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">is this duplicate?? USER_NOT_FOUND vs <br />                 USER_DOES_NOT_EXIST<br />Diff: USER_NOT_FOUND =&gt; for User &lt;&gt; Mentorship relation existence<br />       USER_DOES_NOT_EXIST=&gt; check user's existence in db</div></div></div></foreignObject><text x="512" y="1478" fill="#000000" font-family="Helvetica" font-size="12px">is this duplicate?? USER_NOT_FOUND vs...</text></switch></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2410px; margin-left: 675px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">Typo: NAME_LENGTH_LESSER_THAN_MAX_LIMIT (should be MIN)</div></div></div></foreignObject><text x="675" y="2414" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Typo: NAME_LENGTH_LESSER_THAN_MAX_LIMIT (should be MIN)</text></switch></g><rect x="1600" y="2025" width="280" height="70" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2060px; margin-left: 1740px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">app/api/dao</div></div></div></foreignObject><text x="1740" y="2075" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">app/api/dao</text></switch></g><rect x="1860" y="3470" width="540" height="70" fill="#dae8fc" stroke="#6c8ebf" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 3505px; margin-left: 2130px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">Data Persistence Layer</div></div></div></foreignObject><text x="2130" y="3520" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">Data Persistence Layer</text></switch></g><rect x="1925" y="2035" width="430" height="70" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2070px; margin-left: 2140px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">Data Access Layer</div></div></div></foreignObject><text x="2140" y="2085" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">Data Access Layer</text></switch></g><rect x="1600" y="1095" width="350" height="70" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1130px; margin-left: 1775px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">app/api/models</div></div></div></foreignObject><text x="1775" y="1145" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">app/api/models</text></switch></g><rect x="2065" y="1095" width="310" height="70" fill="#ffe6cc" stroke="#d79b00" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1130px; margin-left: 2220px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">Namespaces</div></div></div></foreignObject><text x="2220" y="1145" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">Namespaces</text></switch></g><path d="M 3409.5 1695 L 3409.5 1705 L 3299.5 1705 L 3299.5 1715.5 L 3280.5 1700 L 3299.5 1684.5 L 3299.5 1695 Z" fill="none" stroke="#000000" stroke-linejoin="round" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1735px; margin-left: 3365px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">typo. should be 200, <br />USER_SUCCESSFULLY_CREATED</div></div></div></foreignObject><text x="3365" y="1739" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">typo. should be 200,...</text></switch></g><path d="M 2760 3536 L 2760 3510 L 3160 3510 L 3160 3536" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2760 3536 L 2760 3668 L 3160 3668 L 3160 3536" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2760 3536 L 3160 3536" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2959.5" y="3527.5">common.py</text></g><rect x="2760" y="3536" width="400" height="124" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2764-3541-392-124-0)" font-size="12px"><text x="2765.5" y="3553.5">auth_header_parser = reqparse.RequestParser()</text><text x="2765.5" y="3567.5">auth_header_parser.add_argument(</text><text x="2765.5" y="3581.5">      "Authorization",</text><text x="2765.5" y="3595.5">      required=True,</text><text x="2765.5" y="3609.5">      help="Authentication access token. E.g.: Bearer &lt;access_token&gt;",</text><text x="2765.5" y="3623.5">      location="headers",</text><text x="2765.5" y="3637.5">)</text></g><path d="M 2760 3664 L 3160 3664" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2700 2706 L 2700 2680 L 3250 2680 L 3250 2706" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2700 2706 L 2700 3410 L 3250 3410 L 3250 2706" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2700 2706 L 3250 2706" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2974.5" y="2697.5">Admin.py</text></g><rect x="2700" y="2706" width="550" height="54" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2704-2711-542-54-0)" font-size="12px"><text x="2705.5" y="2723.5">admin_ns = Namespace("Admins", description="Operations related to Admin users")</text><text x="2705.5" y="2737.5">add_models_to_namespace(admin_ns)</text></g><path d="M 2700 2764 L 3250 2764" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="2700" y="2768" width="550" height="642" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2704-2773-542-642-0)" font-size="12px"><text x="2705.5" y="2785.5">standard responses:  </text><text x="2705.5" y="2799.5">401: messages.TOKEN_HAS_EXPIRED,</text><text x="2705.5" y="2813.5">        messages.TOKEN_IS_INVALID,</text><text x="2705.5" y="2827.5">        messages.AUTHORISATION_TOKEN_OS_MISSING</text><text x="2705.5" y="2841.5">404: messages.USER_DOES_NOT_EXIST</text><text x="2705.5" y="2869.5">@admin_ns.route("admin/new")</text><text x="2705.5" y="2883.5">@admin_ns.response(200, messages.USER_IS_NOW_AN_ADMIN)</text><text x="2705.5" y="2897.5">@admin_ns.response(400, messages.USER_IS_ALREADY_AN_ADMIN)</text><text x="2705.5" y="2911.5">@admin_ns.response(401, 404)</text><text x="2705.5" y="2925.5">@admin_ns.response(403, messages.USER_ASSIGN_NOT_ADMIN)</text><text x="2705.5" y="2939.5">AssignNewUserAdmin(Resource)</text><text x="2705.5" y="2953.5">  @classmethod, @jwt_required</text><text x="2705.5" y="2967.5">  @admin_ns.expect(auth_header_parser, </text><text x="2705.5" y="2981.5">                                    assign_and_revoke_user_admin_request_body, validate=True)</text><text x="2705.5" y="2995.5">  + post(cls) =&gt; UserDAO.get_user(user_id)</text><text x="2705.5" y="3009.5">                          if user is admin, get data =&gt; AdminDAO.assign_new_user(user_id, data)</text><text x="2705.5" y="3023.5">                          else messages.USER_ASSIGN_NOT_ADMIN, 403</text><text x="2705.5" y="3051.5">@admin_ns.route("admin/new")</text><text x="2705.5" y="3065.5">@admin_ns.response(200, messages.USER_ADMIN_STATUS_WAS_REVOKED)</text><text x="2705.5" y="3079.5">@admin_ns.response(400, messages.USER_IS_NOT_AN_ADMIN)</text><text x="2705.5" y="3093.5">@admin_ns.response(401, 404)</text><text x="2705.5" y="3107.5">@admin_ns.response(403, messages.USER_REVOKE_NOT_ADMIN)</text><text x="2705.5" y="3121.5">RevokeUserAdmin(Resource)</text><text x="2705.5" y="3135.5">  @classmethod, @jwt_required</text><text x="2705.5" y="3149.5">  @admin_ns.expect(auth_header_parser, </text><text x="2705.5" y="3163.5">                                    assign_and_revoke_user_admin_request_body, validate=True)</text><text x="2705.5" y="3177.5">  + post(cls) =&gt; UserDAO.get_user(user_id)</text><text x="2705.5" y="3191.5">                         if user is admin, get data =&gt; AdminDAO.revoke_admin_user(user_id, data)</text><text x="2705.5" y="3205.5">                          else messages.USER_REVOKE_NOT_ADMIN, 403</text><text x="2705.5" y="3233.5">@admin_ns.route("admins")</text><text x="2705.5" y="3247.5">ListAdmins(Resource)</text><text x="2705.5" y="3261.5">  @classmethod, @jwt_required</text><text x="2705.5" y="3275.5">  @admin_ns.doc("get_list_of_admins")</text><text x="2705.5" y="3289.5">  @admin_ns.response(200, "Success", public_admin_user_api_model)</text><text x="2705.5" y="3303.5">  @admin_ns.doc(</text><text x="2705.5" y="3317.5">          responses:{401})</text><text x="2705.5" y="3331.5">  @admin_ns.response(403, messages.USER_IS_NOT_AN_ADMIN)</text><text x="2705.5" y="3345.5">  @admin_ns.expect(auth_header_parser)</text><text x="2705.5" y="3359.5">  + get(cls) =&gt; if admin, AdminDAO.list_admins(user_id)</text><text x="2705.5" y="3373.5">                                    marshal(x, public_admin_user_api_model) for x in list_of_admins</text><text x="2705.5" y="3387.5">                                    else messages.USER_IS_NOT_AN_ADMIN</text></g><rect x="2860" y="440" width="410" height="70" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 475px; margin-left: 3065px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">app/api/resources</div></div></div></foreignObject><text x="3065" y="490" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">app/api/resources</text></switch></g><rect x="3755" y="440" width="320" height="70" fill="#ffcccc" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 475px; margin-left: 3915px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">Service Layer</div></div></div></foreignObject><text x="3915" y="490" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">Service Layer</text></switch></g><path d="M 1530 2170 L 1530 2120 L 1930 2120 L 1930 2170" fill="#ffffff" stroke="#ff0000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1530 2170 L 1530 2884 L 1930 2884 L 1930 2170" fill="none" stroke="#ff0000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1530 2170 L 1930 2170" fill="none" stroke="#ff0000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1729.5" y="2137.5">UserDAO </text><text x="1729.5" y="2151.5">=&gt; double import app.database.models.mentorship_rel </text><text x="1729.5" y="2165.5">=&gt; double import app.api.models.mentorship_rel</text></g><rect x="1530" y="2170" width="400" height="64" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1534-2175-392-64-0)" font-size="12px"><text x="1535.5" y="2187.5">+ FAIL_USER_ALREADY_EXISTS='FAIL_USER_ALREADY_EXISTS'</text><text x="1535.5" y="2201.5">+ SUCCESS_USER_CREATED='SUCCESS_USER_CREATED' </text><text x="1535.5" y="2215.5">+ MIN_NUMBER_OF_ADMINS = 1</text></g><path d="M 1530 2238 L 1930 2238" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1530" y="2242" width="400" height="642" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1534-2247-392-642-0)" font-size="12px"><text x="1535.5" y="2259.5">(@staticmethod)</text><text x="1535.5" y="2273.5">+ create_user(data: Dict[str, str])</text><text x="1535.5" y="2287.5">+ get_user_by_email(email: str)</text><text x="1535.5" y="2301.5">+ get_user_by_username(username: str)</text><text x="1535.5" y="2315.5">+ list_users(user_id: int, search_query: str="", is_verified=None)</text><text x="1535.5" y="2329.5">+ confirm_registration(token: str)</text><text x="1535.5" y="2343.5">+ authenticate(username_or_email: str, password: str)</text><text x="1535.5" y="2357.5">+ get_user_statistics(user_id: int)</text><text x="1535.5" y="2371.5">+ get_user_dashboard(user_id)</text><text x="1535.5" y="2399.5">(@staticmethod &amp; @email_verification_required)</text><text x="1535.5" y="2413.5">+ delete_user(user_id: int)</text><text x="1535.5" y="2427.5">+ get_user(user_id: int)</text><text x="1535.5" y="2441.5">+ update_user_profile(user_id: int, data: Dict[str, str])</text><text x="1535.5" y="2455.5">+ change_password(user_id: int, data: Dict[str, str])</text><text x="1535.5" y="2469.5">+ get_achievements(user_id: int)</text><text x="1535.5" y="2497.5">class DashboardRelationResponseModel:</text><text x="1535.5" y="2525.5">   def __init__(self, relation: MentorshipRelationModel):</text><text x="1535.5" y="2539.5">      self.state = relation.state</text><text x="1535.5" y="2553.5">      self.mentor_id = relation.mentor_id</text><text x="1535.5" y="2567.5">      self.mentee_id = relation.mentee_id</text><text x="1535.5" y="2581.5">      self.action_user_id = relation.action_user_id</text><text x="1535.5" y="2595.5">      self.response = {</text><text x="1535.5" y="2609.5">         "id': relation.id,</text><text x="1535.5" y="2623.5">         "action_user_id": relation.action_user_id,</text><text x="1535.5" y="2637.5">         "mentor": {</text><text x="1535.5" y="2651.5">            "id": relation.mentor_id,</text><text x="1535.5" y="2665.5">            "user_name": relation.mentor.name,</text><text x="1535.5" y="2679.5">            "photo_url": relation.mentor.photo_url,</text><text x="1535.5" y="2693.5">          },</text><text x="1535.5" y="2707.5">         "mentee": {</text><text x="1535.5" y="2721.5">            "id": relation.mentee_id,</text><text x="1535.5" y="2735.5">            "user_name": relation.mentee_name,</text><text x="1535.5" y="2749.5">            "photo_url": relation.mentor_photo_url,</text><text x="1535.5" y="2763.5">         },</text><text x="1535.5" y="2777.5">         "creation_date": relation.creation_date,</text><text x="1535.5" y="2791.5">         "accept_date": relation.accept_date,</text><text x="1535.5" y="2805.5">         "start_date": relation.start_date,</text><text x="1535.5" y="2819.5">         "end_date": relation.end_date,</text><text x="1535.5" y="2833.5">         "state": relation.state,</text><text x="1535.5" y="2847.5">         "notes": relation.notes,</text><text x="1535.5" y="2861.5">      }</text></g><path d="M 2060 2166 L 2060 2140 L 2380 2140 L 2380 2166" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2060 2166 L 2060 2330 L 2380 2330 L 2380 2166" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2060 2166 L 2380 2166" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2219.5" y="2157.5">TaskDAO</text></g><path d="M 2060 2183 L 2380 2183" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="2060" y="2200" width="320" height="130" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2064-2205-312-130-0)" font-size="12px"><text x="2065.5" y="2217.5">(@staticmethod &amp; @email_verification_required)</text><text x="2065.5" y="2231.5">+ create_task(user_id: int, mentorship_relation_id: int,</text><text x="2065.5" y="2245.5">                       data: Dict[str, str])</text><text x="2065.5" y="2259.5">+ list_tasks(user_id: int, mentorship_relation_id: int)</text><text x="2065.5" y="2273.5">+ delete_task(user_id: int, mentorship_relation_id: int</text><text x="2065.5" y="2287.5">                       task_id: int)</text><text x="2065.5" y="2301.5">+ complete_task(user_id: int, mentorship_relation_id: int, </text><text x="2065.5" y="2315.5">                       task_id: int)</text></g><path d="M 2015 2406 L 2015 2380 L 2385 2380 L 2385 2406" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2015 2406 L 2015 2560 L 2385 2560 L 2385 2406" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2015 2406 L 2385 2406" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2199.5" y="2397.5">TaskCommentDAO</text></g><rect x="2015" y="2406" width="370" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2019-2411-362-26-0)" font-size="12px"><text x="2020.5" y="2423.5">+ validate_data_for_task_comment(user_id, task_id, relation_id)</text></g><path d="M 2015 2436 L 2385 2436" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="2015" y="2440" width="370" height="120" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2019-2445-362-120-0)" font-size="12px"><text x="2020.5" y="2457.5">(@staticmethod &amp; @email_verification_required)</text><text x="2020.5" y="2471.5">+ create_task_comment(user_id, task_id, relation_id, comment)</text><text x="2020.5" y="2485.5">+ get_task_comment(user_id, _id)</text><text x="2020.5" y="2499.5">+ get_all_task_comments_by_task_id(user_id, task_id, relation_id</text><text x="2020.5" y="2513.5">+ get_all_task_comments_by_user_id(user_id)</text><text x="2020.5" y="2527.5">+ modify_comment(user_id, _id, task_id, relation_id, comment)</text><text x="2020.5" y="2541.5">+ delete_comment(user_id, _id, task_id, relation_id)</text></g><path d="M 2010 2686 L 2010 2660 L 2400 2660 L 2400 2686" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2010 2686 L 2010 2910 L 2400 2910 L 2400 2686" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2010 2686 L 2400 2686" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2204.5" y="2677.5">MentorshipRelationDAO</text></g><rect x="2010" y="2686" width="390" height="44" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2014-2691-382-44-0)" font-size="12px"><text x="2015.5" y="2703.5">MAXIMUM_MENTORSHIP_DURATION=timedelta(weeks=24) ~ 6 mth</text><text x="2015.5" y="2717.5">MINIMUM_MENTORSHIP_DURATION=timedelta(weeks=4)</text></g><path d="M 2010 2734 L 2400 2734" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="2010" y="2738" width="390" height="172" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2014-2743-382-172-0)" font-size="12px"><text x="2015.5" y="2755.5">+ create_mentorship_relation(self, user_id: int, data: Dict[str, str])</text><text x="2015.5" y="2783.5">(@staticmethod &amp; @email_verification_required)</text><text x="2015.5" y="2797.5">+ list_mentorship_relations(user_id=None, state=None)</text><text x="2015.5" y="2811.5">+ accept_request(user_id: int, request_id: int)</text><text x="2015.5" y="2825.5">+ reject_request(user_id: int, request_id: int)</text><text x="2015.5" y="2839.5">+ cancel_relation(user_id: int, relation_id: int)</text><text x="2015.5" y="2853.5">+ delete_request(user_id: int, request_id: int)</text><text x="2015.5" y="2867.5">+ list_past_mentorship_relations(user_id: int)</text><text x="2015.5" y="2881.5">+ list_current_mentorship_relations(user_id: int)</text><text x="2015.5" y="2895.5">+ list_pending_mentorship_relations(user_id: int)</text></g><path d="M 1540 2956 L 1540 2930 L 1830 2930 L 1830 2956" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1540 2956 L 1540 3110 L 1830 3110 L 1830 2956" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1540 2956 L 1830 2956" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1684.5" y="2947.5">AdminDAO</text></g><path d="M 1540 2973 L 1830 2973" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1540" y="2990" width="290" height="120" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1544-2995-282-120-0)" font-size="12px"><text x="1545.5" y="3007.5">(@staticmethod)</text><text x="1545.5" y="3021.5">+ list_admins(user_id)</text><text x="1545.5" y="3049.5">(@staticmethod &amp; @email_verification_required)</text><text x="1545.5" y="3063.5">+ assign_new_user(user_id: int, data: Dict[str, str])</text><text x="1545.5" y="3077.5">+ revoke_admin_user(user_id: int, data: Dict[str, str])</text></g><path d="M 1590 1236 L 1590 1210 L 1860 1210 L 1860 1236" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1590 1236 L 1590 1484 L 1860 1484 L 1860 1236" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1590 1236 L 1860 1236" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1724.5" y="1227.5">user.py</text></g><rect x="1590" y="1236" width="270" height="214" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1594-1241-262-214-0)" font-size="12px"><text x="1595.5" y="1253.5">(Models)</text><text x="1595.5" y="1267.5">+ public_user_api_model</text><text x="1595.5" y="1281.5">+ full_user_api_model</text><text x="1595.5" y="1295.5">+ register_user_api_model</text><text x="1595.5" y="1309.5">+ change_password_request_data_model</text><text x="1595.5" y="1323.5">+ update_user_request_body_model</text><text x="1595.5" y="1337.5">+ login_request_body_model</text><text x="1595.5" y="1351.5">+ login_response_body_model</text><text x="1595.5" y="1365.5">+ refresh_response_body_model</text><text x="1595.5" y="1379.5">+ resend_email_request_body_model</text><text x="1595.5" y="1393.5">+ home_response_body_model</text><text x="1595.5" y="1407.5">+ dashboard_response_body_model</text><text x="1595.5" y="1421.5">+ dashboard_relations_by_state_model</text><text x="1595.5" y="1435.5">+ dashboard_sent_received_model</text></g><path d="M 1590 1454 L 1860 1454" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1590" y="1458" width="270" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1594-1463-262-26-0)" font-size="12px"><text x="1595.5" y="1475.5">+ add_models_to_namespace(api_namespace)</text></g><path d="M 530 3536 L 530 3510 L 800 3510 L 800 3536" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 530 3536 L 530 3710 L 800 3710 L 800 3536" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 530 3536 L 800 3536" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="664.5" y="3527.5">background_scheduler.py</text></g><rect x="530" y="3536" width="270" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-534-3541-262-26-0)" font-size="12px"><text x="535.5" y="3553.5">- scheduler = BackgroundScheduler()</text></g><path d="M 530 3566 L 800 3566" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="530" y="3570" width="270" height="140" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-534-3575-262-140-0)" font-size="12px"><text x="535.5" y="3587.5">+ init__schedulers()</text><text x="535.5" y="3601.5">+ init_ complete_relation_scheduler()</text><text x="535.5" y="3615.5">+ init_delete_unverified_users_scheduler()</text><text x="535.5" y="3643.5">Note:</text><text x="535.5" y="3657.5">  - delete unferified user treshold = 30 days</text><text x="535.5" y="3671.5">  - complete relation scheduler runs every 23:59h</text></g><path d="M 525 3766 L 525 3740 L 805 3740 L 805 3766" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 525 3766 L 525 3796 L 805 3796 L 805 3766" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 525 3766 L 805 3766" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="664.5" y="3757.5">complete_mentorship_cron_job.py</text></g><path d="M 525 3768 L 805 3768" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="525" y="3770" width="280" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-529-3775-272-26-0)" font-size="12px"><text x="530.5" y="3787.5">+ complete_overdue_mentorship_relations_job()</text></g><path d="M 525 3876 L 525 3850 L 805 3850 L 805 3876" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 525 3876 L 525 3906 L 805 3906 L 805 3876" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 525 3876 L 805 3876" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="664.5" y="3867.5">delete_unverified_users_cron_job.py</text></g><path d="M 525 3878 L 805 3878" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="525" y="3880" width="280" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-529-3885-272-26-0)" font-size="12px"><text x="530.5" y="3897.5">+ delete_unverified_users_job()</text></g><path d="M 1150 3611 L 1150 3570 L 1460 3570 L 1460 3611" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1150 3611 L 1150 4250 L 1460 4250 L 1460 3611" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1150 3611 L 1460 3611" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1304.5" y="3587.5">&lt;&lt;entity&gt;&gt;</text><text x="1304.5" y="3601.5">UserModel</text></g><rect x="1150" y="3611" width="310" height="349" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1154-3616-302-349-0)" font-size="12px"><text x="1155.5" y="3628.5">- id: Integer</text><text x="1155.5" y="3642.5">- name: String</text><text x="1155.5" y="3656.5">- username: String</text><text x="1155.5" y="3670.5">- email: String</text><text x="1155.5" y="3684.5">- password_hash: String</text><text x="1155.5" y="3698.5">- registration_date: Float</text><text x="1155.5" y="3712.5">- terms_and_conditions_checked: Boolean</text><text x="1155.5" y="3726.5">- is_admin: Boolean</text><text x="1155.5" y="3740.5">- is_email_verified: Boolean</text><text x="1155.5" y="3754.5">- email_verification_date: DateTime</text><text x="1155.5" y="3768.5">- current_mentorship_role: Integer</text><text x="1155.5" y="3782.5">- membership_status: Integer</text><text x="1155.5" y="3796.5">- bio: String</text><text x="1155.5" y="3810.5">- location: String</text><text x="1155.5" y="3824.5">- occupation: String</text><text x="1155.5" y="3838.5">- organization: String</text><text x="1155.5" y="3852.5">- slack_username: String</text><text x="1155.5" y="3866.5">- social_media_links: String</text><text x="1155.5" y="3880.5">- skills: String</text><text x="1155.5" y="3894.5">- interests: String</text><text x="1155.5" y="3908.5">- resume_url: String</text><text x="1155.5" y="3922.5">- photo_url: String</text><text x="1155.5" y="3936.5">- need_mentoring: String</text><text x="1155.5" y="3950.5">- available_to_mentor: String</text></g><path d="M 1150 3964 L 1460 3964" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1150" y="3968" width="310" height="282" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1154-3973-302-282-0)" font-size="12px"><text x="1155.5" y="3985.5">+ __init__(self, name, username, password, </text><text x="1155.5" y="3999.5">                 email, terms_and_conditions_checked)</text><text x="1155.5" y="4013.5">+ json(self)</text><text x="1155.5" y="4027.5">+ __repr__(self)</text><text x="1155.5" y="4055.5">(@classmethod)</text><text x="1155.5" y="4069.5">+ find_by_username(cls, username: str) -&gt; 'UserModel'</text><text x="1155.5" y="4083.5">+ find_by_email(cls, email: str) -&gt; 'UserModel'</text><text x="1155.5" y="4097.5">+ find_by_id(cls, _id: int) -&gt; 'UserModel'</text><text x="1155.5" y="4111.5">+ get_all_admins(cls, is_admin=True)</text><text x="1155.5" y="4125.5">+ is_empty(cls) -&gt; bool</text><text x="1155.5" y="4153.5">(not @classmethod)</text><text x="1155.5" y="4167.5">+ set_password(self, password_plain_text: str) -&gt; None</text><text x="1155.5" y="4181.5">+ check_password_hash(self, password,</text><text x="1155.5" y="4195.5">                                          password_plain_text)</text><text x="1155.5" y="4209.5">+ save_to_db(self) -&gt; None</text><text x="1155.5" y="4223.5">+ delete_from_db(self) -&gt; None</text></g><path d="M 1510 3611 L 1510 3570 L 1840 3570 L 1840 3611" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1510 3611 L 1510 4200 L 1840 4200 L 1840 3611" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1510 3611 L 1840 3611" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1674.5" y="3587.5">&lt;&lt;entity&gt;&gt;</text><text x="1674.5" y="3601.5">TasksListModel</text></g><rect x="1510" y="3611" width="330" height="59" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1514-3616-322-59-0)" font-size="12px"><text x="1515.5" y="3628.5">- id: Integer</text><text x="1515.5" y="3642.5">- tasks: JsonCustomType</text><text x="1515.5" y="3656.5">- next_task_id: Integer</text></g><path d="M 1510 3674 L 1840 3674" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1510" y="3678" width="330" height="522" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1514-3683-322-522-0)" font-size="12px"><text x="1515.5" y="3695.5">+ __init__(self, tasks:  'TasksListModel' = None</text><text x="1515.5" y="3709.5">+ json(self)</text><text x="1515.5" y="3723.5">+ __repr__(self)</text><text x="1515.5" y="3737.5">+ add_task(self, description: str, created_at: date, </text><text x="1515.5" y="3751.5">                    is_done=False, completed_at=None) -&gt; None</text><text x="1515.5" y="3765.5">+ delete_task(self, task_id: int) -&gt; None</text><text x="1515.5" y="3779.5">+ update_task(self, task_id: int, description: str=None, </text><text x="1515.5" y="3793.5">                         is_done: bool=None, </text><text x="1515.5" y="3807.5">                         completed_at: date=None) -&gt; None</text><text x="1515.5" y="3821.5">+ find_task_by_id(self, task_id: int)</text><text x="1515.5" y="3835.5">+ is_empty(self) -&gt; bool</text><text x="1515.5" y="3849.5">+ save_to_db(self) -&gt; None</text><text x="1515.5" y="3863.5">+ delete_from_db(self) -&gt; None</text><text x="1515.5" y="3891.5">(@classmethod)</text><text x="1515.5" y="3905.5">+ find_by_id(cls, _id: int)</text><text x="1515.5" y="3933.5">@unique</text><text x="1515.5" y="3947.5">class TasksFields(Enum)</text><text x="1515.5" y="3961.5">  (attributes)</text><text x="1515.5" y="3975.5">  - ID = 'id'</text><text x="1515.5" y="3989.5">  - DESCRIPTION = 'description'</text><text x="1515.5" y="4003.5">  - IS_DONE = 'is_done'</text><text x="1515.5" y="4017.5">  - COMPLETED_AT = 'completed_at'</text><text x="1515.5" y="4031.5">  - CREATED_AT = 'created_at'</text><text x="1515.5" y="4059.5">  (method)</text><text x="1515.5" y="4073.5">  + values(self)</text><text x="1515.5" y="4115.5">Note: </text><text x="1515.5" y="4129.5">- enum of JsonCustomType is inside this entity</text><text x="1515.5" y="4143.5">- ecoding/decoding json code is in: </text><text x="1515.5" y="4157.5">      app/database/db_types/JsonCustomType.py</text><text x="1515.5" y="4171.5">      (q: naming convention not of python??)</text></g><path d="M 1900 3613 L 1900 3570 L 2250 3570 L 2250 3613" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1900 3613 L 1900 4020 L 2250 4020 L 2250 3613" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1900 3613 L 2250 3613" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2074.5" y="3587.5">&lt;&lt;entity&gt;&gt;</text><text x="2074.5" y="3601.5">TaskCommentModel</text></g><rect x="1900" y="3613" width="350" height="111" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1904-3618-342-111-0)" font-size="12px"><text x="1905.5" y="3630.5">- id: Integer</text><text x="1905.5" y="3644.5">- user_id: Integer, ForeignKey=users.id</text><text x="1905.5" y="3658.5">- task_id: Integer, ForeignKey=tasks_list.id</text><text x="1905.5" y="3672.5">- relation_id: Integer, ForeignKey=mentorship_relations.id</text><text x="1905.5" y="3686.5">- creation_date: Float</text><text x="1905.5" y="3700.5">- modification_date: Float</text><text x="1905.5" y="3714.5">- comment: String, COMMENT_MAX_LENGTH, nullable=False</text></g><path d="M 1900 3728 L 2250 3728" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1900" y="3732" width="350" height="288" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1904-3737-342-288-0)" font-size="12px"><text x="1905.5" y="3749.5">+ __init__(self, user_id, task_id, relation_id, comment)</text><text x="1905.5" y="3763.5">+ json(self)</text><text x="1905.5" y="3777.5">+ __repr__(self)</text><text x="1905.5" y="3805.5">(@classmethod)</text><text x="1905.5" y="3819.5">+ find_by_id(cls, _id)</text><text x="1905.5" y="3833.5">+ find_by_task_id(cls, task_id, relation_id)</text><text x="1905.5" y="3847.5">+ find_all_by_user_id(cls, user_id)</text><text x="1905.5" y="3861.5">+ is_empty(cls)</text><text x="1905.5" y="3889.5">(not @classmethod)</text><text x="1905.5" y="3903.5">+ modify_comment(self, comment)</text><text x="1905.5" y="3917.5">+ save_to_db(self)</text><text x="1905.5" y="3931.5">+ delete_from_db(self)</text><text x="1905.5" y="3973.5">Note: COMMENT_MAX_LENGTH is defined </text><text x="1905.5" y="3987.5">             in app/api/validation.py</text></g><path d="M 1900 4090 L 1900 4046 L 2400 4046 L 2400 4090" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1900 4090 L 1900 4566 L 2400 4566 L 2400 4090" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1900 4090 L 2400 4090" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2149.5" y="4063.5">&lt;&lt;entity&gt;&gt;</text><text x="2149.5" y="4077.5">MentorshipRelationModel</text></g><rect x="1900" y="4090" width="500" height="216" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1904-4095-492-216-0)" font-size="12px"><text x="1905.5" y="4107.5">+ id: Integer</text><text x="1905.5" y="4121.5">+ mentor_id: Integer, ForeignKey=users.id</text><text x="1905.5" y="4135.5">+ mentee_id: Integer, ForeignKey=users.id</text><text x="1905.5" y="4149.5">+ action_user_id: Integer, nullable=False</text><text x="1905.5" y="4163.5">+ mentor: relationship(UserModel, backref='mentor_relations', </text><text x="1905.5" y="4177.5">                                     primaryjoin="MentorshipRelationModel.mentor_id == UserModel.id")</text><text x="1905.5" y="4191.5">+mentee: relationship(UserModel, backref='mentee_relations', </text><text x="1905.5" y="4205.5">                                    primaryjoin="mentorshipRelationModel.mentee_id == UserModel.id")</text><text x="1905.5" y="4219.5">+ creation_date: Float</text><text x="1905.5" y="4233.5">+ accept_date: Float</text><text x="1905.5" y="4247.5">+ start_date: Float</text><text x="1905.5" y="4261.5">+ end_date: Float</text><text x="1905.5" y="4275.5">+ state: Enum(MentorshipRelationState), nullable=False</text><text x="1905.5" y="4289.5">+ notes: String</text><text x="1905.5" y="4303.5">+ tasks_list_id: Integer, ForeignKye('tasks_list_id)</text><text x="1905.5" y="4317.5">+ tasks_list: relationship(TasksListModel, uselist=False, backref='mentorship_relation')</text></g><path d="M 1900 4310 L 2400 4310" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1900" y="4314" width="500" height="252" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1904-4319-492-252-0)" font-size="12px"><text x="1905.5" y="4331.5">+ __init__(self, action_user_id, mentor_user, mentee_user, creation_date, end_date, state,</text><text x="1905.5" y="4345.5">                 notes, tasks_list)</text><text x="1905.5" y="4359.5">+ json(self)</text><text x="1905.5" y="4387.5">(@classmethod)</text><text x="1905.5" y="4401.5">+ find_by_id(cls, __id) -&gt; 'MentorshipRelationModel'</text><text x="1905.5" y="4415.5">+ is_empty(cls) -&gt; bool</text><text x="1905.5" y="4443.5">(not  @classmethod)</text><text x="1905.5" y="4457.5">+ save_to_db(self)</text><text x="1905.5" y="4471.5">+ delete_from_db(self) -&gt; None</text><text x="1905.5" y="4499.5">Note: </text><text x="1905.5" y="4513.5">- enum of relational data Model is inside the app/utils/enum_utils.py</text><text x="1905.5" y="4527.5">- no __repr__(self) method?</text></g><path d="M 300 4246 L 300 4220 L 690 4220 L 690 4246" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 300 4246 L 300 4450 L 690 4450 L 690 4246" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 300 4246 L 690 4246" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="494.5" y="4237.5">validation_utils.py</text></g><rect x="300" y="4246" width="390" height="54" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-304-4251-382-54-0)" font-size="12px"><text x="305.5" y="4263.5">+ name_regex=r"(^[a-zA-Z\s\-]+$)"</text><text x="305.5" y="4277.5">+ email_regex=r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"</text><text x="305.5" y="4291.5">+ username_regex=r"(^[a-zA-Z0-9_]+$)"</text></g><path d="M 300 4304 L 690 4304" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="300" y="4308" width="390" height="142" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-304-4313-382-142-0)" font-size="12px"><text x="305.5" y="4325.5">+ is_name_valid(name)</text><text x="305.5" y="4339.5">+ is_email_valid(email)</text><text x="305.5" y="4353.5">+ is_username_valid(username)</text><text x="305.5" y="4367.5">+ validate_length(field_length, min_length, max_length, field_name)</text><text x="305.5" y="4381.5">+ get_length_validation_error_message(field_name, min_length, max_length)</text><text x="305.5" y="4395.5">+ get_stripped_string(string_with_whitespace)</text><text x="305.5" y="4437.5">Note: this validation is used with app/api/validations</text></g><path d="M 300 4516 L 300 4490 L 550 4490 L 550 4516" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 300 4516 L 300 4560 L 550 4560 L 550 4516" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 300 4516 L 550 4516" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="424.5" y="4507.5">decorator_utils.py</text></g><path d="M 300 4518 L 550 4518" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="300" y="4520" width="250" height="40" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-304-4525-242-40-0)" font-size="12px"><text x="305.5" y="4537.5">+ email_verification_required(user_function)</text><text x="305.5" y="4551.5">--&gt; check_verification(*args, **kwargs)</text></g><path d="M 740 4246 L 740 4220 L 960 4220 L 960 4246" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 740 4246 L 740 4390 L 960 4390 L 960 4246" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 740 4246 L 960 4246" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="849.5" y="4237.5">enum_utils.py</text></g><rect x="740" y="4246" width="220" height="84" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-744-4251-212-84-0)" font-size="12px"><text x="745.5" y="4263.5">+ PENDING = 1</text><text x="745.5" y="4277.5">+ ACCEPTED = 2</text><text x="745.5" y="4291.5">+ REJECTED = 3</text><text x="745.5" y="4305.5">+ CANCELLED = 4</text><text x="745.5" y="4319.5">+ COMPLETED = 5</text></g><path d="M 740 4334 L 960 4334" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="740" y="4338" width="220" height="52" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-744-4343-212-52-0)" font-size="12px"><text x="745.5" y="4355.5">@unique</text><text x="745.5" y="4369.5">MentorshipRelationState(IntEnum)</text><text x="745.5" y="4383.5">+ values(self)</text></g><rect x="1200" y="440" width="310" height="70" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 475px; margin-left: 1355px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">app/api - utils</div></div></div></foreignObject><text x="1355" y="490" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">app/api - uti...</text></switch></g><rect x="1930" y="440" width="430" height="70" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 475px; margin-left: 2145px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">app/api/validations</div></div></div></foreignObject><text x="2145" y="490" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">app/api/validations</text></switch></g><path d="M 1390 546 L 1390 520 L 1710 520 L 1710 546" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1390 546 L 1390 608 L 1710 608 L 1710 546" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1390 546 L 1710 546" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1549.5" y="537.5">api_extension.py</text></g><rect x="1390" y="546" width="320" height="54" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1394-551-312-54-0)" font-size="12px"><text x="1395.5" y="563.5">+ api.add_namespace(user_namespace, path="/")</text><text x="1395.5" y="577.5">+ api.add_namespace(admin_namespace, path="/")</text><text x="1395.5" y="591.5">+ api.add_namespace(mentorship_namespace, path="/")</text></g><path d="M 1390 604 L 1710 604" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1050 546 L 1050 520 L 1370 520 L 1370 546" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1050 546 L 1050 670 L 1370 670 L 1370 546" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1050 546 L 1370 546" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1209.5" y="537.5">email_utils.py</text></g><path d="M 1050 550 L 1370 550" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1050" y="554" width="320" height="116" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1054-559-312-116-0)" font-size="12px"><text x="1055.5" y="571.5">+ generate_confirmation_token(email)</text><text x="1055.5" y="585.5">+ confirm_token(token, expiration=</text><text x="1055.5" y="599.5">   config.BaseConfig.UNVERIFIED_USER_THRESHOLD)</text><text x="1055.5" y="613.5">+ send_email_verification_message(user_name, email)</text><text x="1055.5" y="627.5">+ send_email_mentorship_relation_accepted(request_id)</text><text x="1055.5" y="641.5">+ send_email_new_request(user_sender, user_recipient,</text><text x="1055.5" y="655.5">                                            notes, sender_role)</text></g><path d="M 1060 706 L 1060 680 L 1360 680 L 1360 706" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1060 706 L 1060 800 L 1360 800 L 1360 706" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1060 706 L 1360 706" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1209.5" y="697.5">jwt_extension.py</text></g><rect x="1060" y="706" width="300" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1064-711-292-26-0)" font-size="12px"><text x="1065.5" y="723.5">- jwt = JWTManager()</text></g><path d="M 1060 736 L 1360 736" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1060" y="740" width="300" height="60" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1064-745-292-60-0)" font-size="12px"><text x="1065.5" y="757.5">+ my_expired_token_callback()</text><text x="1065.5" y="771.5">+ my_invalid_token_callback(error_message)</text><text x="1065.5" y="785.5">+ my_unauthorized_request_callback(error_message)</text></g><path d="M 1440 666 L 1440 640 L 1600 640 L 1600 666" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1440 666 L 1440 700 L 1600 700 L 1600 666" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1440 666 L 1600 666" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1519.5" y="657.5">mail_extension.py</text></g><rect x="1440" y="666" width="160" height="26" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1444-671-152-26-0)" font-size="12px"><text x="1445.5" y="683.5">+ mail = Mail()</text></g><path d="M 1440 696 L 1600 696" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1370 4426 L 1370 4400 L 1610 4400 L 1610 4426" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1370 4426 L 1370 4510 L 1610 4510 L 1610 4426" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1370 4426 L 1610 4426" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1489.5" y="4417.5">JsonCustomType.py</text></g><path d="M 1370 4430 L 1610 4430" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1370" y="4434" width="240" height="76" fill="#ffffff" stroke="none" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1374-4439-232-76-0)" font-size="12px"><text x="1375.5" y="4451.5">JsonCustomType(db.TypeDecorator)</text><text x="1375.5" y="4465.5">+ process_bind_param(cls, value, dialect)</text><text x="1375.5" y="4479.5">+ process_result_value(cls, value, dialect)</text></g><rect x="1225" y="4300" width="540" height="70" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 4335px; margin-left: 1495px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 50px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">app/database/db_types</div></div></div></foreignObject><text x="1495" y="4350" fill="#000000" font-family="Helvetica" font-size="50px" text-anchor="middle">app/database/db_types</text></switch></g><rect x="1510" y="80" width="1390" height="130" fill="#ffffff" stroke="none" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 145px; margin-left: 2205px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 100px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">MENTORSHIP-BACKEND/app</div></div></div></foreignObject><text x="2205" y="175" fill="#000000" font-family="Helvetica" font-size="100px" text-anchor="middle">MENTORSHIP-BACKEND/app</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://desk.draw.io/support/solutions/articles/16000042487" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>